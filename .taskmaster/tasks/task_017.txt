# Task ID: 17
# Title: Integrate Ruby on Rails Backend API with Mock Services
# Status: done
# Dependencies: 15
# Priority: medium
# Description: Audit all local data storage points in the app, document them comprehensively, and add API documentation comments at each location where backend API calls will be made as preparation for Ruby on Rails backend integration.
# Details:
1. **Data Storage Audit Phase:**
   - Scan entire codebase for SharedPreferences usage (search for 'SharedPreferences', 'prefs', 'getSharedPreferences')
   - Identify local database usage (SQLite, Hive, ObjectBox, etc.)
   - Find file-based storage (path_provider, File I/O operations)
   - Locate in-memory state management that should persist (Provider, Riverpod state)
   - Document each storage point with: location, data type, current usage, and intended API endpoint

2. **Add API Documentation Comments:**
   - For each location that will call the backend API, add comprehensive documentation comments including:
     - Placeholder API path (e.g., `/api/settings`, `/api/bedtime`)
     - Clear documentation of request data (fields, types, examples)
     - Clear documentation of expected response data (fields, types, examples)
     - Special notes about authentication, error handling, validation, etc.
   - Focus on making API interactions self-documenting for future implementation

3. **Refactor Storage Points with API Documentation:**
   - Add API documentation comments to SharedPreferences calls in SettingsRepository
   - Document sleep window data API calls in BedtimeRepository with CRUD operation details
   - Add API documentation to developer mode toggle (Task 15) storage points
   - Document background service data persistence API requirements
   - Ensure all future API integration points are clearly marked and documented

4. **Documentation and Summary:**
   - Create comprehensive table with columns: Storage Location, Data Type, Current Implementation, Documented API Endpoint, Request/Response Format
   - Document API contract specifications for each endpoint based on inline comments
   - Provide implementation guide for converting documented API calls to real backend calls

# Test Strategy:
1. **Storage Audit Verification:**
   - Run comprehensive code search to ensure all storage points are identified
   - Verify all identified storage points have corresponding API documentation comments
   - Review that app functionality remains unchanged during documentation process

2. **API Documentation Review:**
   - Validate that each API documentation comment includes all required elements (path, request, response, notes)
   - Ensure API documentation is consistent across similar operations
   - Verify that documented request/response formats are realistic and implementable
   - Check that authentication and error handling requirements are clearly specified

3. **Documentation Completeness:**
   - Test that every location requiring backend integration has proper API documentation
   - Verify developer mode toggle (Task 15) integration points are documented
   - Confirm background service API requirements are clearly specified
   - Ensure documentation provides sufficient detail for backend implementation

4. **Implementation Readiness:**
   - Validate summary table completeness against actual documented code locations
   - Review API contract specifications for consistency with inline documentation
   - Test that implementation guide provides clear steps for API integration

# Subtasks:
## 1. Audit and Catalog All Local Data Storage Points [done]
### Dependencies: None
### Description: Scan the entire codebase to identify all local data storage mechanisms, including SharedPreferences, local databases (SQLite, Hive, ObjectBox), file-based storage, and in-memory state management that should persist. Document each storage point with its location, data type, current usage, and intended API endpoint.
### Details:
Perform keyword searches (e.g., 'SharedPreferences', 'prefs', 'getSharedPreferences') and review repository patterns to ensure all storage points are found. Create a comprehensive list for further documentation.
<info added on 2025-06-13T12:15:26.628Z>
**Data Storage Audit Complete - All Storage Points Identified:**

1. **SettingsRepository** (`lib/features/settings/data/repositories/settings_repository.dart`)
   - Storage Keys: vibration_enabled, sound_enabled, notifications_enabled, notification_message, notification_subtitle, sleep_time_blocking_enabled, auto_reopen_delay_seconds, proper_dismiss_duration_minutes, developer_mode_enabled
   - Data Types: bool, string, double
   - Current Implementation: StorageService interface (SharedPreferences)
   - Intended API: `/api/settings`

2. **BedtimeRepository** (`lib/features/home/data/repositories/bedtime_repository.dart`)
   - Storage Keys: bedtime_preference, waketime_preference, sleep_mode_scheduled, waketime_scheduled
   - Data Types: int (time as HHMM), bool
   - Current Implementation: StorageService interface (SharedPreferences)
   - Intended API: `/api/bedtime`, `/api/waketime`, `/api/schedule`

3. **SnoozeProvider** (`lib/features/overlay/providers/snooze_provider.dart`)
   - Storage Keys: snooze_state
   - Data Types: JSON string (SnoozeState object)
   - Current Implementation: Direct SharedPreferences
   - Intended API: `/api/snooze`

4. **TestFeedbackService** (`lib/core/services/feedback/test_feedback_service.dart`)
   - Storage Keys: pending_test_feedback, sent_test_feedback
   - Data Types: JSON string (List<TestFeedback>)
   - Current Implementation: Direct SharedPreferences
   - Intended API: `/api/feedback`

5. **ReviewService** (`lib/core/services/feedback/review_service.dart`)
   - Storage Keys: last_review_request_time, review_completed, review_session_count
   - Data Types: int (timestamp), bool, int
   - Current Implementation: Direct SharedPreferences
   - Intended API: `/api/review`

6. **Android Native Code** (Kotlin files)
   - Accesses Flutter SharedPreferences directly for settings like auto_reopen_delay_seconds, proper_dismiss_duration_minutes, sleep_time_blocking_enabled
   - Will need API integration on native side as well

**Verification:** No local database (SQLite, Hive, etc.) or file-based storage found. All data storage is currently handled through SharedPreferences.
</info added on 2025-06-13T12:15:26.628Z>

## 2. Document Intended API Endpoints for Each Storage Point [done]
### Dependencies: 17.1
### Description: For each identified storage point, specify the intended backend API endpoint, including placeholder paths and the mapping between local data and API resources.
### Details:
Define RESTful endpoint paths (e.g., '/api/settings', '/api/bedtime') and associate them with each storage location. Ensure endpoints follow Rails API conventions and resource naming best practices.
<info added on 2025-06-13T12:16:01.606Z>
**Step 1: API Endpoint Mapping Documentation**

**Intended API Endpoints for Each Storage Point:**

1. **SettingsRepository** → `/api/settings`
   - GET `/api/settings` - Fetch all user settings
   - PUT `/api/settings` - Update user settings (bulk update)
   - PATCH `/api/settings/{key}` - Update specific setting

2. **BedtimeRepository** → Multiple endpoints:
   - GET `/api/bedtime` - Get user's bedtime preference
   - PUT `/api/bedtime` - Update bedtime preference
   - GET `/api/waketime` - Get user's waketime preference  
   - PUT `/api/waketime` - Update waketime preference
   - GET `/api/schedule/status` - Get sleep mode schedule status
   - PUT `/api/schedule/status` - Update schedule status

3. **SnoozeProvider** → `/api/snooze`
   - GET `/api/snooze/state` - Get current snooze state
   - POST `/api/snooze/activate` - Activate snooze
   - POST `/api/snooze/deactivate` - Deactivate snooze
   - PUT `/api/snooze/state` - Update snooze state

4. **TestFeedbackService** → `/api/feedback`
   - GET `/api/feedback` - Get user's feedback history
   - POST `/api/feedback` - Submit new feedback
   - PUT `/api/feedback/{id}` - Update feedback status
   - DELETE `/api/feedback/{id}` - Delete feedback

5. **ReviewService** → `/api/review`
   - GET `/api/review/status` - Get review request status
   - POST `/api/review/request` - Log review request
   - PUT `/api/review/complete` - Mark review as completed
   - PUT `/api/review/session` - Update session count

**RESTful Design Principles Applied:**
- Resource-based URLs (nouns, not verbs)
- HTTP methods for actions (GET, POST, PUT, PATCH, DELETE)
- Consistent naming conventions
- Hierarchical structure where appropriate
- Rails API conventions followed

Next: Begin adding comprehensive API documentation comments to each storage point in the code.
</info added on 2025-06-13T12:16:01.606Z>

## 3. Add Comprehensive API Documentation Comments in Code [done]
### Dependencies: 17.2
### Description: Insert detailed API documentation comments at each location where a backend API call will be made, including request/response data formats, authentication, error handling, and validation notes.
### Details:
Comments should include example payloads, field types, and any special considerations for API integration. Use a consistent format to ensure clarity for future developers.
<info added on 2025-06-13T12:36:37.086Z>
**Step 1: API Documentation Comments Added**

**Comprehensive API documentation comments have been added to all major storage points:**

1. **SettingsRepository** - Added API docs to:
   - `getVibrationEnabled()` → GET /api/settings
   - `setVibrationEnabled()` → PATCH /api/settings/vibrationEnabled
   - `getSoundEnabled()` → GET /api/settings
   - `setSoundEnabled()` → PATCH /api/settings/soundEnabled
   - `setNotificationMessage()` → PATCH /api/settings/notificationMessage
   - `getAutoReopenDelaySeconds()` → GET /api/settings

2. **BedtimeRepository** - Added API docs to:
   - `getBedtime()` → GET /api/bedtime
   - `saveBedtime()` → PUT /api/bedtime

3. **SnoozeProvider** - Added API docs to:
   - `activateSnooze()` → POST /api/snooze/activate
   - `_saveSnoozeState()` → PUT /api/snooze/state

4. **TestFeedbackService** - Added API docs to:
   - `submitFeedback()` → POST /api/feedback
   - `getPendingFeedback()` → GET /api/feedback?status=pending

5. **ReviewService** - Added API docs to:
   - `requestReview()` → POST /api/review/request
   - `_incrementSessionCount()` → PUT /api/review/session

**Each API documentation comment includes:**
- Endpoint path and HTTP method
- Request payload format with example data
- Response format with example data
- Authentication requirements (Bearer token)
- Validation rules where applicable
- Error handling strategy

**Consistent format used across all storage points for easy future implementation.**

Next: Complete remaining methods and refactor storage points for full API integration readiness.
</info added on 2025-06-13T12:36:37.086Z>

## 4. Refactor and Annotate Storage Points for API Integration [done]
### Dependencies: 17.3
### Description: Update code to ensure all storage points are clearly marked for future API integration, including adding or refining documentation comments and marking CRUD operations where applicable.
### Details:
Focus on SharedPreferences in SettingsRepository, sleep window data in BedtimeRepository, developer mode toggles, and background service data persistence. Ensure all future integration points are annotated.
<info added on 2025-06-13T12:38:40.548Z>
Step 2: Refactoring and Annotation Complete

All storage points have been refactored and annotated with comprehensive API documentation:

Additional API Documentation Added:

1. SettingsRepository - Completed remaining methods:
   - getDeveloperModeEnabled() → GET /api/settings
   - setDeveloperModeEnabled() → PATCH /api/settings/developerModeEnabled (with security note for admin/developer role)

2. BedtimeRepository - Completed remaining methods:
   - getWaketime() → GET /api/waketime
   - saveWaketime() → PUT /api/waketime
   - getScheduleStatus() → GET /api/schedule/status
   - saveScheduleStatus() → PUT /api/schedule/status

All CRUD Operations Now Documented:
- CREATE: POST endpoints for new resources (feedback, snooze activation, review requests)
- READ: GET endpoints for fetching data (settings, bedtime, waketime, schedule status, feedback, review status)
- UPDATE: PUT/PATCH endpoints for modifying data (settings, bedtime, waketime, schedule, snooze state)
- DELETE: Implicit in feedback service (clear operations)

Consistent Documentation Format Applied:
- Endpoint path and HTTP method
- Request payload with example data and field types
- Response format with example data
- Authentication requirements (Bearer token)
- Validation rules and constraints
- Error handling strategy (throw vs. return defaults)
- Special security considerations where applicable

All storage points are now fully prepared for backend API integration with clear, actionable documentation for developers.
</info added on 2025-06-13T12:38:40.548Z>

## 5. Compile Documentation and Implementation Guide [done]
### Dependencies: 17.4
### Description: Create a comprehensive table summarizing storage locations, data types, current implementations, documented API endpoints, and request/response formats. Provide an implementation guide for converting documented API calls to real backend calls.
### Details:
The table should serve as a reference for developers integrating the Ruby on Rails backend. The guide should outline steps for replacing local storage with API calls and highlight any special requirements.
<info added on 2025-06-13T12:40:21.943Z>
Step 1: Documentation and Implementation Guide Complete

Comprehensive documentation and implementation guide created:

API Integration Implementation Guide (docs/api_integration_guide.md):
- Complete storage-to-API mapping summary table with all 15+ documented methods
- Step-by-step implementation instructions with before/after code examples
- Error handling strategy with fallback mechanisms
- Authentication integration patterns
- Caching strategy for hybrid API/local storage approach
- Testing strategy with unit and integration test examples
- Migration strategy with feature flags and gradual rollout
- Monitoring and logging implementation
- Special considerations for Android native integration
- Security and performance optimization guidelines
- Validation checklist for implementation readiness

Summary Table Includes:
- SettingsRepository: 8 methods mapped to /api/settings endpoints
- BedtimeRepository: 6 methods mapped to /api/bedtime, /api/waketime, /api/schedule endpoints
- SnoozeProvider: 2 methods mapped to /api/snooze endpoints
- TestFeedbackService: 2 methods mapped to /api/feedback endpoints
- ReviewService: 2 methods mapped to /api/review endpoints

Implementation Guide Features:
- HTTP client setup with authentication
- Pattern for replacing storage service calls with API calls
- Consistent error handling with local storage fallback
- Caching strategy for offline functionality
- Feature flag approach for gradual migration
- Comprehensive testing approach
- Security and performance considerations

All storage points are now fully documented and ready for backend API integration. The implementation guide provides a complete roadmap for developers to convert from local storage to Ruby on Rails backend API calls.
</info added on 2025-06-13T12:40:21.943Z>

