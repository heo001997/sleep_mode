# Sleep Mode App - Product Requirements Document

## Overview
Sleep Mode is a digital wellness solution that helps users reduce nighttime phone usage through time-based blocking. The platform consists of a Flutter mobile app for device blocking and a simple Rails+React web platform for data management and basic user dashboard.

**Problem**: Excessive nighttime phone usage disrupts sleep quality and creates addiction patterns
**Solution**: Native mobile blocking with web-based data storage and simple user dashboard
**Target Users**: Young adults, students, working professionals seeking better sleep habits

## Core Features

### Mobile App (Flutter) - Primary Blocking Interface âœ…
**Platform**: Android (primary), iOS (basic support)

#### 1. Time-Based Sleep Blocking âœ…
- Bedtime setting with time picker (hour/minute)
- Automatic activation during designated sleep windows
- Overnight schedules supported (e.g., 11 PM to 7 AM)
- Persistent settings via SharedPreferences
- **Status**: Fully implemented with comprehensive test coverage (27+ scenarios)

#### 2. Native Android System Overlay âœ…  
- `FullScreenAlarmActivity.kt` with WindowManager system overlay
- Uncircumventable blocking that works across all apps
- Method channel bridge for Flutter communication
- High-priority notifications with screen wake capability
- **Status**: Production-ready implementation

#### 3. Smart Dismissal System âœ…
- Multiple duration options (5/10/15 minutes configurable)
- Simple timer-based dismissal
- Smart re-triggering when returning after dismissal period
- Persistent snooze state across app restarts
- **Status**: Working with sophisticated reopen logic

#### 4. Background Operation âœ…
- AlarmManager integration for Doze mode compatibility
- Event-driven architecture (not continuous polling)
- Background service for Android monitoring
- **Status**: Implemented with proper Android lifecycle handling

### Web Platform (Rails + React) - Data Management ðŸ†•
**Platform**: Simple web application for data storage and basic dashboard

#### 1. Rails API Backend ðŸ†•
- User authentication and account management
- API endpoints for mobile app data synchronization
- Sleep session data storage and retrieval
- User settings and preferences management

#### 2. React Dashboard ðŸ†•
- Simple user login flow
- Basic dashboard to view Flutter app settings
- User profile management
- Sleep data visualization (basic charts)

## User Experience

### Mobile App Flow
1. User downloads app and sets initial bedtime preferences
2. App monitors time and activates blocking during sleep windows
3. Overlay appears with dismissal options (5-15 minutes)
4. Usage data is synced to Rails API backend
5. User can view data on web dashboard

### Web Platform Flow  
1. User creates account and logs in
2. Views basic dashboard with Flutter app settings
3. Reviews sleep data and usage patterns
4. Manages account settings and preferences

## Technical Architecture

### Mobile App (Flutter) - VERIFIED
- **Flutter SDK**: â‰¥3.22.0 with null safety and Material 3 support
- **Dart SDK**: â‰¥3.3.0
- **Target Platforms**: Android (primary), iOS (basic)
- **Architecture**: Domain-driven design with feature-first organization
- **Key Dependencies**: 
  - `shared_preferences` for local storage
  - `battery_plus` for power monitoring
  - `flutter_local_notifications` for system notifications
  - `http` for API communication
- **Native Components**: Kotlin-based system overlay for Android

### Web Platform (Rails + React) - NEW
- **Backend**: Rails 8.0.2 with Ruby 3.3+
- **Frontend**: React 19.1.0 with TypeScript and Vite
- **Database**: SQLite (development), PostgreSQL (production)
- **Styling**: Tailwind CSS with Shadcn UI components
- **API**: RESTful JSON API for mobile app integration
- **Authentication**: Session-based with secure token handling

### Development Structure
```
80-SleepMode/
â”œâ”€â”€ sleep_mode_flutter/     # Mobile app repository
â”‚   â”œâ”€â”€ lib/               # Flutter application code
â”‚   â”œâ”€â”€ android/           # Android-specific implementation
â”‚   â”œâ”€â”€ ios/              # iOS-specific implementation
â”‚   â””â”€â”€ test/             # Mobile app tests
â””â”€â”€ sleep_mode_rails/      # Web platform repository
    â”œâ”€â”€ app/              # Rails application (API)
    â”œâ”€â”€ frontend/         # React frontend code
    â”œâ”€â”€ config/           # Rails configuration
    â””â”€â”€ db/               # Database migrations and schema
```

## Development Roadmap

### Phase 1: Mobile App Foundation âœ… (COMPLETED)
- âœ… Time-based blocking system
- âœ… Native Android overlay implementation
- âœ… Smart dismissal logic
- âœ… Background operation and battery optimization
- âœ… Comprehensive testing suite

### Phase 2: Web Platform MVP ðŸ”„ (IN PROGRESS)
- ðŸ”„ Rails API backend setup
- ðŸ”„ User authentication system
- ðŸ”„ API endpoints for mobile app integration
- ðŸ”„ React frontend with basic dashboard
- ðŸ”„ User login flow and settings view

### Phase 3: Data Integration ðŸ“‹ (PLANNED)
- ðŸ“‹ Mobile app API integration
- ðŸ“‹ Sleep data synchronization
- ðŸ“‹ User settings sync between platforms
- ðŸ“‹ Basic data visualization
- ðŸ“‹ Error handling and offline support

## Logical Dependency Chain

### Foundation Dependencies (Must be completed first)
1. **Rails API Setup** - Backend infrastructure with user authentication
2. **Database Schema** - User accounts and sleep data tables
3. **API Endpoints** - RESTful routes for mobile app communication
4. **React Setup** - Frontend application with routing

### Integration Dependencies (Build upon foundation)
1. **Mobile API Integration** - Connect Flutter app to Rails backend
2. **Authentication Bridge** - Link mobile users to web accounts
3. **Data Synchronization** - Sync sleep data and user settings
4. **Basic Dashboard** - Simple web interface for viewing data

## Technical Requirements

### Mobile App Requirements
- Android API level 21+ (Android 5.0+)
- iOS 12.0+ (basic functionality)
- Internet connection for data sync
- System overlay permissions (Android)

### Web Platform Requirements
- Modern web browsers (Chrome 90+, Firefox 88+, Safari 14+)
- Responsive design for mobile/tablet/desktop
- HTTPS for secure authentication

### Infrastructure Requirements
- Ruby 3.3+ for Rails backend
- Node.js 18+ for React build
- PostgreSQL for production database
- SSL certificates for secure communication

## Risks and Mitigations

### Technical Risks
- **API Integration Complexity**
  - *Mitigation*: Simple RESTful design with clear documentation
- **Cross-platform Authentication**
  - *Mitigation*: Standard session-based auth with secure tokens
- **Data Synchronization**
  - *Mitigation*: Robust error handling and offline support

### User Experience Risks
- **Additional Platform Complexity**
  - *Mitigation*: Keep web platform simple and optional
- **User Adoption of Web Features**
  - *Mitigation*: Focus on essential data viewing functionality

## Success Metrics

### Technical Metrics
- âœ… Mobile app: Zero analyzer warnings, stable overlay operation
- ðŸŽ¯ Web platform: <3s page load times, reliable API responses
- ðŸŽ¯ Integration: Successful data sync, stable authentication

### User Metrics
- ðŸŽ¯ Mobile app: Positive user reviews (4.0+ rating)
- ðŸŽ¯ Web platform: Simple login flow, basic data visualization
- ðŸŽ¯ Cross-platform: Successful account linking and data sync

## Future Enhancement Opportunities

### Advanced Features
- Sleep pattern analysis and insights
- Data export functionality
- Mobile app settings management via web
- Improved data visualizations

### Platform Expansion
- iOS feature parity
- Desktop blocking applications
- Third-party integrations

---
**Current Status**: Solid mobile app foundation with comprehensive blocking features. Web platform development focused on core API and simple dashboard functionality. Ready for practical implementation and user testing. 