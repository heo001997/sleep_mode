# Sleep Mode App - Product Requirements Document (VERIFIED)

## Overview
Sleep Mode helps users reduce nighttime phone usage through **time-based blocking** combined with **basic posture detection**. The app uses a native Android system overlay that cannot be circumvented, providing effective digital boundaries during designated sleep hours.

**Problem**: Excessive nighttime phone usage disrupts sleep quality and creates addiction patterns
**Solution**: Time-based blocking with smart dismissal options and basic motion detection
**Target Users**: Young adults, students, working professionals seeking better sleep habits

## Core Features (VERIFIED AGAINST CODEBASE)

### 1. Time-Based Sleep Blocking âœ…
- Bedtime setting with time picker (hour/minute)
- Automatic activation during designated sleep windows
- Overnight schedules supported (e.g., 11 PM to 7 AM)
- Persistent settings via SharedPreferences
- **Status**: Fully implemented with comprehensive test coverage (27+ scenarios)

### 2. Native Android System Overlay âœ…  
- `FullScreenAlarmActivity.kt` with WindowManager system overlay
- Uncircumventable blocking that works across all apps
- Method channel bridge for Flutter communication
- High-priority notifications with screen wake capability
- **Status**: Production-ready implementation

### 3. Basic Posture Detection âœ…
- Simple accelerometer-based motion detection
- Face-down gesture recognition for dismissal (z-axis < -9 m/sÂ²)
- Basic lying-flat detection using z-axis/xy magnitude thresholds
- **Reality Check**: Uses basic math, NOT advanced quaternion analysis
- **Status**: Functional but simple implementation

### 4. Smart Dismissal System âœ…
- Multiple duration options (5/10/15 minutes configurable)
- Face-down gesture dismissal (2+ seconds stability)
- Smart re-triggering when returning to bed
- Persistent snooze state across app restarts
- **Status**: Working with sophisticated reopen logic

### 5. Background Operation âœ…
- AlarmManager integration for Doze mode compatibility
- Event-driven architecture (not continuous polling)
- Background service for Android monitoring
- **Status**: Implemented with proper Android lifecycle handling

## Technical Architecture (VERIFIED)

### Current Implementation Status
- **Flutter Warnings**: 2 minor warnings (unused imports) - not zero
- **Architecture**: Clean domain-driven design with feature-first organization
- **Testing**: Comprehensive sleep window logic tests (all passing)
- **Build Status**: Production-ready APK/AAB generation

### Core Components
- **Flutter Layer**: Material 3 UI with provider-based state management
- **Services**: SleepController, PostureDetector, StorageService, DismissalService
- **Native Android**: FullScreenAlarmActivity with system-level overlay capabilities
- **Data Persistence**: SharedPreferences for settings and state

### Key Technologies
- Flutter SDK â‰¥3.22.0, Dart â‰¥3.3.0
- sensors_plus for accelerometer access
- battery_plus for power monitoring
- flutter_local_notifications for system notifications
- Native Kotlin with method channels

## User Experience

### Primary Flow
1. User sets desired bedtime in time picker
2. App monitors time and basic device motion
3. When bedtime + motion conditions met â†’ native overlay appears
4. User can dismiss for 5-15 minutes or use face-down gesture
5. Overlay intelligently re-appears based on conditions

### Current Limitations
- **Posture detection is basic** - only simple accelerometer thresholds
- **iOS support limited** - primarily Android-focused implementation
- **No advanced analytics** - basic functionality only

## Development Status

### Completed Phases âœ…
- âœ… Foundation: Basic bedtime settings and persistence
- âœ… Time Logic: Robust sleep window calculations with tests
- âœ… Native Overlay: System-wide Android blocking implementation
- âœ… Dismissal Logic: Multiple dismissal methods with smart re-triggering
- âœ… Background: Event-driven architecture with battery optimization

### Current Phase (In Progress)
- ðŸ”„ Distribution: App store preparation and final optimizations

### Known Technical Debt
- 2 Flutter analyzer warnings (unused imports)
- Advanced posture system exists but not integrated with main flow
- iOS implementation is basic compared to Android

## Key Risks & Mitigations

**Technical**
- **Battery Usage**: Event-driven design minimizes impact (unmeasured but optimized)
- **Android Overlay Reliability**: Extensive testing across device types needed
- **iOS Limitations**: Accept Android-first approach, basic iOS functionality

**User Experience**  
- **Easy Circumvention**: Focus on helpful friction rather than absolute blocking
- **False Posture Detection**: Basic thresholds may need user calibration

## Success Metrics (Realistic)
- **Technical**: Resolve remaining analyzer warnings, stable overlay operation
- **User**: Positive feedback on time-based blocking effectiveness
- **Distribution**: Successful app store approval and initial user acquisition

## Future Enhancement Opportunities
- **Integrate advanced posture detection** (quaternion-based system exists but unused)
- **Sleep analytics and insights** beyond basic blocking
- **iOS parity** with native system integrations
- **Family sharing and parental controls**

---
**Current Reality**: Solid time-based sleep blocking app with native Android overlay. Basic but functional posture detection. Ready for distribution with minor cleanup needed. 