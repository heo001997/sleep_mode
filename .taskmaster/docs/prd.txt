# Sleep Mode App - Product Requirements Document

## Overview
Sleep Mode is a digital wellness solution that helps users reduce nighttime phone usage through time-based blocking. The platform consists of a Flutter mobile app for device blocking and a simple Rails+React web platform for data management and basic user dashboard.

**Problem Solved**: Excessive nighttime phone usage disrupts sleep quality and creates digital addiction patterns, with users needing a simple way to track and manage their blocking behavior.

**Solution Approach**: Native mobile device blocking with web-based data storage and simple dashboard for viewing usage patterns and managing settings.

**Target Users**: Young adults (18-35), students, working professionals seeking better sleep habits with basic data tracking capabilities.

## Core Features

### Mobile Application (Flutter) - Primary Blocking Interface
**Platforms**: Android (full-featured), iOS (basic functionality)
**Current Status**: Production-ready with comprehensive feature set

#### 1. Time-Based Sleep Blocking System âœ…
- **Bedtime Configuration**: Intuitive time picker interface (hour/minute selection)
- **Sleep Window Management**: Automatic activation during user-defined sleep periods
- **Overnight Support**: Cross-midnight schedules (e.g., 11:30 PM to 6:30 AM)
- **Persistent Settings**: SharedPreferences-based storage with crash recovery
- **Smart Scheduling**: Handles timezone changes and daylight saving transitions
- **Status**: Fully implemented with comprehensive test coverage (27+ test scenarios)

#### 2. Native System Overlay Implementation âœ…  
- **Core Technology**: `FullScreenAlarmActivity.kt` with WindowManager system overlay
- **Circumvention Prevention**: System-level blocking that works across all applications
- **Flutter Integration**: Method channel bridge for seamless communication
- **Notification System**: High-priority notifications with screen wake capabilities
- **Permissions Handling**: Automatic system overlay permission requests
- **Status**: Production-ready with extensive device compatibility testing

#### 3. Intelligent Dismissal System âœ…
- **Duration Options**: Configurable snooze periods (5/10/15 minutes with custom options)
- **Timer-Based Dismissal**: Simple countdown interface for temporary access
- **Smart Re-triggering**: Automatic overlay reactivation after dismissal period expires
- **Persistent State**: Snooze state maintained across app restarts and device reboots
- **Usage Tracking**: Dismissal frequency and duration analytics for behavior insights
- **Status**: Fully functional with sophisticated user behavior tracking

#### 4. Background Operation & Battery Optimization âœ…
- **AlarmManager Integration**: Doze mode compatible scheduling for reliable activation
- **Event-Driven Architecture**: Eliminates continuous polling for battery efficiency
- **Background Services**: Lightweight monitoring with proper Android lifecycle management
- **Power Management**: Intelligent battery usage optimization with user consent
- **Status**: Production-ready with Android power management best practices

### Web Platform (Rails + React) - Data Management
**Platform**: Simple web application for data storage and basic dashboard
**Current Status**: Active development with focused scope

#### 1. Rails API Backend ðŸ†•
- **User Authentication**: Account creation, login, and session management
- **Data Storage**: Sleep session data and user preferences
- **API Endpoints**: RESTful routes for mobile app data synchronization
- **Security**: Secure token handling and data validation

#### 2. React Dashboard ðŸ†•
- **User Login Flow**: Simple authentication and account access
- **Settings View**: Display and manage Flutter app settings
- **Basic Data Display**: View sleep session history and patterns
- **Profile Management**: Update user preferences and account information

## User Experience

### Mobile Application User Journey
1. **Onboarding**: Download app â†’ quick setup wizard â†’ bedtime preference configuration
2. **Daily Usage**: App monitors time â†’ automatic blocking activation at bedtime
3. **Interaction**: System overlay appears â†’ dismissal options presented (5-15 minutes)
4. **Data Collection**: Usage patterns recorded â†’ automatic sync to Rails API
5. **Insights**: Basic usage data available on web dashboard

### Web Platform User Journey  
1. **Account Setup**: Create account â†’ login to dashboard
2. **Data Review**: View Flutter app settings and sleep session data
3. **Settings Management**: Update preferences that sync back to mobile app
4. **Usage Patterns**: Review basic charts and statistics

## Technical Architecture

### Mobile Application (Flutter) - Current Implementation
- **Framework**: Flutter SDK â‰¥3.22.0 with null safety and Material 3 design system
- **Language**: Dart SDK â‰¥3.3.0 with modern language features
- **Architecture Pattern**: Domain-driven design with feature-first file organization
- **Target Platforms**: Android (API 21+), iOS (12.0+) with platform-specific optimizations
- **Key Dependencies**: 
  - `shared_preferences` (^2.2.0) - Local data persistence
  - `battery_plus` (^4.0.0) - Power management monitoring  
  - `flutter_local_notifications` (^15.0.0) - System notification management
  - `http` (^1.1.0) - API communication with Rails backend
- **Native Integration**: Kotlin-based system overlay for Android with method channel communication

### Web Platform (Rails + React) - Simple Implementation
- **Backend Framework**: Ruby on Rails 8.0.2 with Ruby 3.3+ features
- **Frontend Framework**: React 19.1.0 with TypeScript for type safety
- **Build System**: Vite 6.3.5 for fast development and optimized production builds
- **Database**: SQLite (development), PostgreSQL (production) with ActiveRecord ORM
- **Styling System**: Tailwind CSS with Shadcn UI components for basic interface
- **API Architecture**: RESTful JSON API with simple authentication
- **Authentication**: Session-based authentication with secure token handling

### Development Repository Structure
```
80-SleepMode/                           # Parent project directory
â”œâ”€â”€ sleep_mode_flutter/                 # Mobile application repository
â”‚   â”œâ”€â”€ lib/                           # Flutter application source code
â”‚   â”‚   â”œâ”€â”€ features/                  # Feature-based organization
â”‚   â”‚   â”œâ”€â”€ core/                      # Shared business logic
â”‚   â”‚   â””â”€â”€ shared/                    # Reusable UI components
â”‚   â”œâ”€â”€ android/                       # Android platform implementation
â”‚   â”œâ”€â”€ ios/                          # iOS platform implementation
â”‚   â””â”€â”€ test/                         # Unit and widget tests
â””â”€â”€ sleep_mode_rails/                  # Web platform repository
    â”œâ”€â”€ app/                          # Rails application structure
    â”‚   â”œâ”€â”€ controllers/              # API endpoints
    â”‚   â”œâ”€â”€ models/                   # Data models and business logic
    â”‚   â””â”€â”€ serializers/              # JSON response formatting
    â”œâ”€â”€ frontend/                     # React application
    â”‚   â”œâ”€â”€ src/                      # TypeScript source code
    â”‚   â””â”€â”€ components/               # UI components
    â”œâ”€â”€ config/                       # Rails configuration
    â””â”€â”€ db/                          # Database migrations and schema
```

## Development Roadmap

### Phase 1: Mobile App Foundation âœ… (COMPLETED - Q4 2024)
- âœ… **Core Blocking System**: Time-based sleep window implementation
- âœ… **Native Android Overlay**: System-level uncircumventable blocking
- âœ… **Smart Dismissal Logic**: Multiple duration options with intelligent re-triggering
- âœ… **Background Operations**: Battery-optimized monitoring with Android lifecycle compliance
- âœ… **Comprehensive Testing**: Unit tests, integration tests, and manual device testing

### Phase 2: Web Platform Foundation ðŸ”„ (IN PROGRESS - Q1 2025)
- ðŸ”„ **Rails API Backend**: RESTful API development with authentication endpoints
- ðŸ”„ **React Frontend Setup**: TypeScript configuration with basic dashboard
- ðŸ”„ **User Authentication**: Registration, login, and session management implementation
- ðŸ”„ **Database Schema**: User accounts and sleep session tables
- ðŸ”„ **API Integration**: Endpoints for mobile app data synchronization

### Phase 3: Data Integration ðŸ“‹ (PLANNED - Q2 2025)
- ðŸ“‹ **Mobile API Integration**: Flutter app connection to Rails backend
- ðŸ“‹ **Data Synchronization**: Sleep session and settings sync between platforms  
- ðŸ“‹ **Authentication Bridge**: Seamless account linking between mobile and web
- ðŸ“‹ **Basic Dashboard**: Simple visualization of sleep data and app settings
- ðŸ“‹ **Error Handling**: Offline support and sync conflict resolution

## Logical Dependency Chain

### Foundation Dependencies (Critical Path - Must Complete First)
1. **Rails API Infrastructure**
   - Rails application setup with proper routing and middleware
   - Database schema design with user accounts and sleep session tables
   - Authentication system with session management
   - Basic CRUD operations for user data and sleep tracking

2. **React Dashboard Foundation**
   - React application structure with TypeScript configuration
   - Routing system with authentication guards
   - Basic UI components with Tailwind CSS styling
   - Login flow and dashboard layout

### Integration Dependencies (Building Upon Foundation)
1. **Mobile-Web Authentication Bridge**
   - Token-based authentication between Flutter and Rails
   - User account linking and verification system
   - Session management across platforms

2. **Data Synchronization Implementation**
   - API endpoints for sleep session data
   - Settings synchronization between mobile and web
   - Basic error handling and offline support

## Technical Requirements

### Mobile Application System Requirements
- **Android**: API level 21+ (Android 5.0 Lollipop), 2GB RAM minimum, 100MB storage
- **iOS**: iOS 12.0+, iPhone 6s or newer, 100MB available storage
- **Permissions**: System overlay (Android), notifications, network access
- **Connectivity**: Internet connection required for data sync, offline functionality available

### Web Platform System Requirements
- **Browser Compatibility**: 
  - Chrome 90+ (full feature support)
  - Firefox 88+ (full feature support)
  - Safari 14+ (basic feature support)
  - Edge 90+ (full feature support)
- **Responsive Design**: Mobile (320px+), tablet (768px+), desktop (1024px+) optimization
- **Performance**: <3s initial page load, <1s subsequent navigation
- **Authentication**: HTTPS required for secure session handling

### Infrastructure Requirements
- **Backend Hosting**: Ruby 3.3+, Rails 8.0+, 2GB RAM minimum for production
- **Database**: PostgreSQL 14+ with connection pooling, automated backups
- **Frontend**: Node.js 18+ for build process, Vite for development and production builds
- **Security**: SSL certificates, HTTPS enforcement, secure session management

## Risks and Mitigations

### Technical Risks & Mitigation Strategies

#### API Integration Complexity
- **Risk**: Difficulty integrating Flutter app with Rails API
- **Impact**: Medium - Delayed development timeline
- **Mitigation**: 
  - Use simple RESTful design patterns
  - Implement comprehensive API documentation
  - Create API testing suite for reliability
  - Start with basic endpoints and iterate

#### Cross-Platform Authentication
- **Risk**: Session management issues between mobile and web
- **Impact**: Medium - User experience degradation
- **Mitigation**:
  - Use standard session-based authentication
  - Implement secure token handling
  - Create automated testing for auth flows
  - Provide clear error messages for auth failures

### User Experience Risks & Mitigation Strategies

#### Additional Platform Complexity
- **Risk**: Users may find web platform unnecessary or confusing
- **Impact**: Low - Optional platform for advanced users
- **Mitigation**:
  - Keep web platform simple and optional
  - Focus on essential data viewing functionality
  - Maintain mobile-first approach
  - Clear value proposition for web features

## Success Metrics

### Technical Performance Metrics
- âœ… **Mobile App Stability**: Zero critical bugs, <0.1% crash rate, 4.5+ app store rating
- ðŸŽ¯ **Web Platform Performance**: <3s page load times, reliable API responses
- ðŸŽ¯ **Cross-Platform Integration**: Successful data sync, stable authentication
- ðŸŽ¯ **API Reliability**: >99% uptime, <500ms response times

### User Engagement Metrics
- ðŸŽ¯ **Mobile App Retention**: 70%+ 7-day retention, 40%+ 30-day retention
- ðŸŽ¯ **Web Platform Adoption**: 20%+ of mobile users access web dashboard
- ðŸŽ¯ **Feature Utilization**: Successful login flow, basic data viewing
- ðŸŽ¯ **Cross-Platform Usage**: Successful account linking and settings sync

## Future Enhancement Opportunities

### Advanced Analytics
- Sleep pattern analysis and insights
- Data export functionality for personal health records
- Integration with health platforms (Apple Health, Google Fit)
- Improved data visualizations and trend analysis

### Platform Expansion
- Mobile app settings management via web interface
- iOS feature parity with Android implementation
- Desktop applications for comprehensive device blocking
- Third-party integrations and API access

### User Experience Improvements
- Enhanced dashboard with more detailed statistics
- Email notifications for sleep goal achievements
- Mobile push notifications for web-based insights
- Improved offline functionality and sync reliability

---

**Current Development Status**: Solid mobile application foundation with production-ready blocking functionality. Web platform development focused on core API backend and simple React dashboard. Architecture designed for practical implementation with clear, achievable goals.

**Next Immediate Priorities**: Complete Rails API setup with user authentication, implement basic React dashboard with login flow, establish Flutter-to-Rails API integration, and deploy MVP for user testing. 